template<typename Tp, Tp v>
struct integral_constant {
  static constexpr Tp                  value = v;
  typedef Tp                           value_type;
  typedef integral_constant<Tp, v>     type;
  constexpr operator value_type() const noexcept { return value; }
  constexpr value_type operator()() const noexcept { return value; }
};

template<typename Tp, Tp v>
constexpr Tp integral_constant<Tp, v>::value;

/// The type used as a compile-time boolean with true value.
typedef integral_constant<bool, true>     true_type;

/// The type used as a compile-time boolean with false value.
typedef integral_constant<bool, false>    false_type;

template<class T, class U>
struct is_same : false_type {};

template<class T>
struct is_same<T, T> : true_type {};

template<class T, class U>
inline constexpr bool is_same_v = is_same<T, U>::value;

<% (1..n).each do |i| %>
struct <%= "s#{i}a" %> {};
struct <%= "s#{i}b" %> {};
#if defined(METABENCH)
inline constexpr bool <%= "t#{i}a" %> = is_same_v<<%= "s#{i}a" %>, <%= "s#{i}b" %>>;
inline constexpr bool <%= "t#{i}b" %> = is_same_v<<%= "s#{i}b" %>, <%= "s#{i}a" %>>;
inline constexpr bool <%= "t#{i}c" %> = is_same_v<<%= "s#{i}a" %>, <%= "s#{i}a" %>>;
inline constexpr bool <%= "t#{i}d" %> = is_same_v<<%= "s#{i}b" %>, <%= "s#{i}b" %>>;
#else
inline constexpr bool <%= "t#{i}a" %> = false;
inline constexpr bool <%= "t#{i}b" %> = false;
inline constexpr bool <%= "t#{i}c" %> = true;
inline constexpr bool <%= "t#{i}d" %> = true;
#endif
<% end %>


int main()
{
}
