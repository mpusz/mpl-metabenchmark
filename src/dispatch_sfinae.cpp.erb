template<bool B, class T = void>
struct enable_if {};
 
template<class T>
struct enable_if<true, T> { typedef T type; };

template<long long N>
struct X {
  template<long long M = N>
  static constexpr typename enable_if<M % 2 == 0, int>::type foo()
  {
    return 0;
  }
  template<long long M = N>
  static constexpr typename enable_if<M % 2 != 0, int>::type foo()
  {
    return 1;
  }
  static constexpr int boo()
  {
    return -1;
  }
};

<% (1..n).each do |i| %>
#if defined(METABENCH)
inline constexpr int <%= "i#{i}" %> = X<<%= "#{i}" %>>::foo();
#else
inline constexpr int <%= "i#{i}" %> = X<<%= "#{i}" %>>::boo();
#endif
<% end %>

int main()
{
}
